var x=(n,o,r)=>new Promise((m,l)=>{var p=e=>{try{a(r.next(e))}catch(y){l(y)}},t=e=>{try{a(r.throw(e))}catch(y){l(y)}},a=e=>e.done?m(e.value):Promise.resolve(e.value).then(p,t);a((r=r.apply(n,o)).next())});var c=n=>new Promise(o=>setTimeout(o,n)),R=(n,o)=>{let{maxRetries:r=3,retryDelay:m=1e3,maxRetryDelay:l=6e4,retryDelayType:p="exponential"}=o||{},t,a=(...e)=>new Promise((y,u)=>x(void 0,null,function*(){let i=0;for(t=s=>{i=r,u(s)};i<r;)try{let s=yield n(...e);return y(s)}catch(s){if(i>=r)return u(s);let d=p==="exponential"?Math.min(Math.pow(2,i)*m,l):m;i++,yield c(d)}return u({message:"Retry failed"})}));return a.abort=e=>{t==null||t(e),t=void 0},a};export{c as delay,R as retryPromiseFactory};
//# sourceMappingURL=index.es.js.map
